# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class ReceiptsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    @response_catcher = HttpResponseCatcher.new
    @controller = ReceiptsController.new CONFIG, http_call_back: @response_catcher
  end

  # Retrieve a list of all account(s) receipts that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_account_receipts()
    # Parameters for the API call
    acct_token = 'acct-b3f0570a-6586-4e00-8d6e-8a2bf93cfae4'
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.list_account_receipts(acct_token, x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"payload":[{"amount":5000.01,"currency":"USD","sourceToken":"acct-0401'\
      '7f57-8526-4b0c-9152-5252975a86e4","destinationToken":"dest-04017f57-852'\
      '6-4b0c-9152-5252975a86e4","createdOn":"2023-02-21T00:00:00Z"}],"meta":{'\
      '"pageNo":"1","pageSize":"20","pageCount":"85","recordCount":"1685","tim'\
      'ezone":"GMT"},"links":[{"params":{"rel":"self"},"href":"https://platfor'\
      'm.mypayquicker.com/api/v2/accounts/acct-04017f57-8526-4b0c-9152-5252975'\
      'a86e4/receipts"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve a list all prepaid-card receipts that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_prepaid_card_receipts()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    dest_token = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79'
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.list_prepaid_card_receipts(user_token, dest_token, x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['x-timezone'] = nil
    expected_headers['x-paging-pageno'] = nil
    expected_headers['x-paging-pagecount'] = nil
    expected_headers['x-paging-pagesize'] = nil
    expected_headers['x-paging-totalrecordcount'] = nil
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"payload":[{"amount":5000.05,"currency":"USD","sourceToken":"user-0401'\
      '7f57-8526-4b0c-9152-5252975a86e4","destinationToken":"dest-04017f57-852'\
      '6-4b0c-9152-5252975a86e4","createdOn":"2023-02-21T00:00:00Z"}],"meta":{'\
      '"pageNo":"1","pageSize":"20","pageCount":"85","recordCount":"1685","tim'\
      'ezone":"GMT"},"links":[{"params":{"rel":"self"},"href":"https://platfor'\
      'm.mypayquicker.com/api/v2/users/user-04017f57-8526-4b0c-9152-5252975a86'\
      'e4/prepaid-cards/dest-04017f57-8526-4b0c-9152-5252975a86e4/receipts"}]}'\
      ''
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve a list all user receipts that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_user_receipts()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.list_user_receipts(user_token, x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['x-timezone'] = nil
    expected_headers['x-paging-pageno'] = nil
    expected_headers['x-paging-pagecount'] = nil
    expected_headers['x-paging-pagesize'] = nil
    expected_headers['x-paging-totalrecordcount'] = nil
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"payload":[{"amount":5000.01,"currency":"USD","sourceToken":"user-0401'\
      '7f57-8526-4b0c-9152-5252975a86e4","destinationToken":"dest-04017f57-852'\
      '6-4b0c-9152-5252975a86e4","createdOn":"2023-02-21T00:00:00Z"}],"meta":{'\
      '"pageNo":"1","pageSize":"20","pageCount":"85","recordCount":"1685","tim'\
      'ezone":"GMT"},"links":[{"params":{"rel":"self"},"href":"https://platfor'\
      'm.mypayquicker.com/api/v2/users/user-04017f57-8526-4b0c-9152-5252975a86'\
      'e4/receipts"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

end
