# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Pqapiv2
  # Classifies the required account field objects
  class BankAccountRequiredFields < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Classifies the format of the required information for a bank account
    # @return [BankAccountRequirementFormat]
    attr_accessor :format

    # Classifies account field types
    # @return [BankAccountFieldTypesEnum]
    attr_accessor :requirement

    # Localized requirement description for display purposes
    # @return [List of KeyValuePairLanguageTypeString]
    attr_accessor :description

    # Localized requirement description for display purposes
    # @return [List of BankAccountRequirementValidator]
    attr_accessor :validators

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['format'] = 'format'
      @_hash['requirement'] = 'requirement'
      @_hash['description'] = 'description'
      @_hash['validators'] = 'validators'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        format
        requirement
        description
        validators
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(format = nil,
                   requirement = nil,
                   description = nil,
                   validators = nil)
      @format = format unless format == SKIP
      @requirement = requirement unless requirement == SKIP
      @description = description unless description == SKIP
      @validators = validators unless validators == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      format = BankAccountRequirementFormat.from_hash(hash['format']) if hash['format']
      requirement = hash.key?('requirement') ? hash['requirement'] : SKIP
      # Parameter is an array, so we need to iterate through it
      description = nil
      unless hash['description'].nil?
        description = []
        hash['description'].each do |structure|
          description << (KeyValuePairLanguageTypeString.from_hash(structure) if structure)
        end
      end

      description = SKIP unless hash.key?('description')
      # Parameter is an array, so we need to iterate through it
      validators = nil
      unless hash['validators'].nil?
        validators = []
        hash['validators'].each do |structure|
          validators << (BankAccountRequirementValidator.from_hash(structure) if structure)
        end
      end

      validators = SKIP unless hash.key?('validators')

      # Create object from extracted values.
      BankAccountRequiredFields.new(format,
                                    requirement,
                                    description,
                                    validators)
    end
  end
end
