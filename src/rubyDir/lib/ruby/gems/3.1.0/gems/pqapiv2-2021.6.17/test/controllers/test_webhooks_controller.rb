# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class WebhooksControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    @response_catcher = HttpResponseCatcher.new
    @controller = WebhooksController.new CONFIG, http_call_back: @response_catcher
  end

  # Retrieve a list of all webhook subscriptions that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_webhook_subscriptions()
    # Parameters for the API call
    x_my_pay_quicker_version = '2020.02.24'

    # Perform the API call through the SDK function
    result = @controller.list_webhook_subscriptions(x_my_pay_quicker_version)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"links":[{"params":{"rel":"self"},"href":"string"}],"payload":[{"links'\
      '":[{"params":{"rel":"self"},"href":"string"}],"url":"https://www.exampl'\
      'e.com/webhooks","namespace":"BANKACCOUNTS.UPDATED.STATUS.APPROVED","tok'\
      'en":"webh-2dd54a53-3814-4ce1-862f-dc06b09ead4a","created":"2020-01-01",'\
      '"lastUpdated":"2020-02-01"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Create a webhook subscription for a given URL and namespace. When this event fires, the webhook receives a call from the API.
  def test_create_webhook_subscription()
    # Parameters for the API call
    x_my_pay_quicker_version = '2020.02.24'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.create_webhook_subscription(x_my_pay_quicker_version, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"links":[{"params":{"rel":"self"},"href":"string"}],"url":"https://www'\
      '.example.com/webhooks","namespace":"BANKACCOUNTS.UPDATED.STATUS.APPROVE'\
      'D","token":"webh-2dd54a53-3814-4ce1-862f-dc06b09ead4a","created":"2020-'\
      '01-01"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Create a webhook subscription for a given URL and namespace. When this event fires, the webhook receives a call from the API.
  def test_create_webhook_subscription1()
    # Parameters for the API call
    x_my_pay_quicker_version = '2020.02.24'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.create_webhook_subscription(x_my_pay_quicker_version, body: body)

    # Test response code
    assert_equal(201, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

end
