# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Pqapiv2
  # PrepaidCardCollectionResponse Model.
  class PrepaidCardCollectionResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [List of PrepaidCardResponse]
    attr_accessor :payload

    # TODO: Write general description for this method
    # @return [List of HaetosParams]
    attr_accessor :links

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payload'] = 'payload'
      @_hash['links'] = 'links'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        payload
        links
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(payload = nil,
                   links = nil)
      @payload = payload unless payload == SKIP
      @links = links unless links == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      payload = nil
      unless hash['payload'].nil?
        payload = []
        hash['payload'].each do |structure|
          payload << (PrepaidCardResponse.from_hash(structure) if structure)
        end
      end

      payload = SKIP unless hash.key?('payload')
      # Parameter is an array, so we need to iterate through it
      links = nil
      unless hash['links'].nil?
        links = []
        hash['links'].each do |structure|
          links << (HaetosParams.from_hash(structure) if structure)
        end
      end

      links = SKIP unless hash.key?('links')

      # Create object from extracted values.
      PrepaidCardCollectionResponse.new(payload,
                                        links)
    end
  end
end
