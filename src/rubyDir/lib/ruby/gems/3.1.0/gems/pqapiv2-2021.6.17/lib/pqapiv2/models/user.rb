# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Pqapiv2
  # Object for user
  class User < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # User's first name. <i>Required</i> if the user is registered as an
    # individual.
    # @return [String]
    attr_accessor :first_name

    # User's last name. <i>Required</i> if the user is registered as an
    # individual.
    # @return [String]
    attr_accessor :last_name

    # User's date of birth
    # @return [Date]
    attr_accessor :date_of_birth

    # Legal name for the business
    # @return [String]
    attr_accessor :business_name

    # Name under which the business operates
    # @return [String]
    attr_accessor :business_operating_name

    # Registration number or ID assigned by a government body
    # @return [String]
    attr_accessor :business_registration_id

    # State, province, or territory where the business is registered
    # @return [String]
    attr_accessor :business_registration_region

    # Two-digit country code types
    # @return [CountryTypesEnum]
    attr_accessor :business_registration_country

    # Role of the user within the business
    # @return [BusinessContactRoleEnum]
    attr_accessor :business_contact_role

    # First line of the business address that specifies street number, street
    # name, and building name
    # @return [String]
    attr_accessor :business_address_line1

    # Second line of the business address that specifies the apartment, suite,
    # or space number (or any other designation not literally part of the
    # physical address)
    # @return [String]
    attr_accessor :business_address_line2

    # Third line of the business address that specifies the international or
    # business addresses that do not fit on businessAddressLine3
    # @return [String]
    attr_accessor :business_address_line3

    # fourth line of the business address street address
    # @return [String]
    attr_accessor :business_address_line4

    # Fifth line of the business address street address
    # @return [String]
    attr_accessor :business_address_line5

    # City the business is registered
    # @return [String]
    attr_accessor :business_city

    # State, province, or region the business is registered
    # @return [String]
    attr_accessor :business_region

    # Two-digit country code types
    # @return [CountryTypesEnum]
    attr_accessor :business_country

    # Postal code for the business address
    # @return [String]
    attr_accessor :business_postal_code

    # House number for the business address
    # @return [String]
    attr_accessor :business_premise_number

    # Type of business (<i>Corporation</i> or <i>Partnership</i>)
    # @return [BusinessTypesEnum]
    attr_accessor :business_type

    # User's driver's license number
    # @return [String]
    attr_accessor :driver_license_id

    # User's passport number
    # @return [String]
    attr_accessor :passport_id

    # User's government ID type
    # @return [GovernmentIdTypeEnum]
    attr_accessor :government_id_type

    # User's government ID number, such as a <i>SSN</i>, <i>EIN</i>, or
    # <i>SIN</i>
    # @return [String]
    attr_accessor :government_id

    # The E.164 formatted primary phone number. This can be the same as the
    # mobile number.
    # @return [String]
    attr_accessor :phone_number

    # The E.164 formatted mobile phone number, required by most financial
    # institutions for account creation, verification, or PSD2 (3DS). Mobile
    # numbers must be unique to a user within a tenant and cannot be shared.
    # @return [String]
    attr_accessor :mobile_number

    # Two-digit country code types
    # @return [CountryTypesEnum]
    attr_accessor :phone_number_country

    # Two-digit country code types
    # @return [CountryTypesEnum]
    attr_accessor :mobile_number_country

    # First line of the address that specifies street number, street name, and
    # building name
    # @return [String]
    attr_accessor :address_line1

    # Second line of the address that specifies the apartment, suite, or space
    # number (or any other designation not literally part of the physical
    # address)
    # @return [String]
    attr_accessor :address_line2

    # Third line of the address that specifies the international or business
    # addresses that do not fit on addressLine2
    # @return [String]
    attr_accessor :address_line3

    # Fourth line of the address, if any
    # @return [String]
    attr_accessor :address_line4

    # Fifth line of the address, if any
    # @return [String]
    attr_accessor :address_line5

    # City or town of the business address
    # @return [String]
    attr_accessor :city

    # State, province, or territory of the business address
    # @return [String]
    attr_accessor :region

    # Two-digit country code types
    # @return [CountryTypesEnum]
    attr_accessor :country

    # Series of letters, digits, or both, included in a postal address for the
    # purpose of sorting mail
    # @return [String]
    attr_accessor :postal_code

    # House or building number of the business address
    # @return [String]
    attr_accessor :premise_number

    # Classifies the address type (<i>Home</i>, <i>Business</i>, <i>Billing</i>,
    # <i>Shipping</i>)
    # @return [AddressTypesEnum]
    attr_accessor :address_type

    # Email address for the user account
    # @return [String]
    attr_accessor :email

    # User's employer identifier
    # @return [String]
    attr_accessor :employer_id

    # Gender as a user identifies
    # @return [GenderTypesEnum]
    attr_accessor :gender

    # Account holder's profile type
    # @return [UserTypesEnum]
    attr_accessor :user_type

    # Program identifier for the user
    # @return [String]
    attr_accessor :program_user_id

    # Language type in IETF's BCP 47 format
    # @return [LanguageTypesEnum]
    attr_accessor :language

    # Two-digit country code types
    # @return [CountryTypesEnum]
    attr_accessor :country_of_birth

    # Two-digit country code types
    # @return [CountryTypesEnum]
    attr_accessor :country_of_nationality

    # Type of occupation for the user
    # @return [OccupationTypesEnum]
    attr_accessor :occupation

    # Tax resident status type of a country
    # @return [TaxResidentStatusTypesEnum]
    attr_accessor :tax_resident_status

    # Currency code type for the object
    # @return [CurrencyTypesEnum]
    attr_accessor :currency

    # Token representing the resource, prefixed with <i>user-</i>, <i>dest-</i>,
    # <i>xfer-</i>, <i>acct-</i>, <i>pmnt-</i>, or <i>docu-</i>.
    # @return [String]
    attr_accessor :token

    # Current status of the user
    # @return [UserStatusTypesEnum]
    attr_accessor :status

    # Time at which the object was created.
    # @return [DateTime]
    attr_accessor :created_on

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['first_name'] = 'firstName'
      @_hash['last_name'] = 'lastName'
      @_hash['date_of_birth'] = 'dateOfBirth'
      @_hash['business_name'] = 'businessName'
      @_hash['business_operating_name'] = 'businessOperatingName'
      @_hash['business_registration_id'] = 'businessRegistrationId'
      @_hash['business_registration_region'] = 'businessRegistrationRegion'
      @_hash['business_registration_country'] = 'businessRegistrationCountry'
      @_hash['business_contact_role'] = 'businessContactRole'
      @_hash['business_address_line1'] = 'businessAddressLine1'
      @_hash['business_address_line2'] = 'businessAddressLine2'
      @_hash['business_address_line3'] = 'businessAddressLine3'
      @_hash['business_address_line4'] = 'businessAddressLine4'
      @_hash['business_address_line5'] = 'businessAddressLine5'
      @_hash['business_city'] = 'businessCity'
      @_hash['business_region'] = 'businessRegion'
      @_hash['business_country'] = 'businessCountry'
      @_hash['business_postal_code'] = 'businessPostalCode'
      @_hash['business_premise_number'] = 'businessPremiseNumber'
      @_hash['business_type'] = 'businessType'
      @_hash['driver_license_id'] = 'driverLicenseId'
      @_hash['passport_id'] = 'passportId'
      @_hash['government_id_type'] = 'governmentIdType'
      @_hash['government_id'] = 'governmentId'
      @_hash['phone_number'] = 'phoneNumber'
      @_hash['mobile_number'] = 'mobileNumber'
      @_hash['phone_number_country'] = 'phoneNumberCountry'
      @_hash['mobile_number_country'] = 'mobileNumberCountry'
      @_hash['address_line1'] = 'addressLine1'
      @_hash['address_line2'] = 'addressLine2'
      @_hash['address_line3'] = 'addressLine3'
      @_hash['address_line4'] = 'addressLine4'
      @_hash['address_line5'] = 'addressLine5'
      @_hash['city'] = 'city'
      @_hash['region'] = 'region'
      @_hash['country'] = 'country'
      @_hash['postal_code'] = 'postalCode'
      @_hash['premise_number'] = 'premiseNumber'
      @_hash['address_type'] = 'addressType'
      @_hash['email'] = 'email'
      @_hash['employer_id'] = 'employerId'
      @_hash['gender'] = 'gender'
      @_hash['user_type'] = 'userType'
      @_hash['program_user_id'] = 'programUserId'
      @_hash['language'] = 'language'
      @_hash['country_of_birth'] = 'countryOfBirth'
      @_hash['country_of_nationality'] = 'countryOfNationality'
      @_hash['occupation'] = 'occupation'
      @_hash['tax_resident_status'] = 'taxResidentStatus'
      @_hash['currency'] = 'currency'
      @_hash['token'] = 'token'
      @_hash['status'] = 'status'
      @_hash['created_on'] = 'createdOn'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        first_name
        last_name
        date_of_birth
        business_name
        business_operating_name
        business_registration_id
        business_registration_region
        business_registration_country
        business_contact_role
        business_address_line1
        business_address_line2
        business_address_line3
        business_address_line4
        business_address_line5
        business_city
        business_region
        business_country
        business_postal_code
        business_premise_number
        business_type
        driver_license_id
        passport_id
        government_id_type
        government_id
        address_line1
        address_line2
        address_line3
        address_line4
        address_line5
        city
        region
        country
        postal_code
        premise_number
        address_type
        email
        employer_id
        gender
        user_type
        program_user_id
        language
        country_of_birth
        country_of_nationality
        occupation
        tax_resident_status
        currency
        token
        status
        created_on
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(phone_number = nil,
                   mobile_number = nil,
                   phone_number_country = nil,
                   mobile_number_country = nil,
                   first_name = nil,
                   last_name = nil,
                   date_of_birth = nil,
                   business_name = nil,
                   business_operating_name = nil,
                   business_registration_id = nil,
                   business_registration_region = nil,
                   business_registration_country = nil,
                   business_contact_role = nil,
                   business_address_line1 = nil,
                   business_address_line2 = nil,
                   business_address_line3 = nil,
                   business_address_line4 = nil,
                   business_address_line5 = nil,
                   business_city = nil,
                   business_region = nil,
                   business_country = nil,
                   business_postal_code = nil,
                   business_premise_number = nil,
                   business_type = nil,
                   driver_license_id = nil,
                   passport_id = nil,
                   government_id_type = nil,
                   government_id = nil,
                   address_line1 = nil,
                   address_line2 = nil,
                   address_line3 = nil,
                   address_line4 = nil,
                   address_line5 = nil,
                   city = nil,
                   region = nil,
                   country = nil,
                   postal_code = nil,
                   premise_number = nil,
                   address_type = nil,
                   email = nil,
                   employer_id = nil,
                   gender = nil,
                   user_type = nil,
                   program_user_id = nil,
                   language = nil,
                   country_of_birth = nil,
                   country_of_nationality = nil,
                   occupation = nil,
                   tax_resident_status = nil,
                   currency = nil,
                   token = nil,
                   status = nil,
                   created_on = nil)
      @first_name = first_name unless first_name == SKIP
      @last_name = last_name unless last_name == SKIP
      @date_of_birth = date_of_birth unless date_of_birth == SKIP
      @business_name = business_name unless business_name == SKIP
      @business_operating_name = business_operating_name unless business_operating_name == SKIP
      @business_registration_id = business_registration_id unless business_registration_id == SKIP
      unless business_registration_region == SKIP
        @business_registration_region =
          business_registration_region
      end
      unless business_registration_country == SKIP
        @business_registration_country =
          business_registration_country
      end
      @business_contact_role = business_contact_role unless business_contact_role == SKIP
      @business_address_line1 = business_address_line1 unless business_address_line1 == SKIP
      @business_address_line2 = business_address_line2 unless business_address_line2 == SKIP
      @business_address_line3 = business_address_line3 unless business_address_line3 == SKIP
      @business_address_line4 = business_address_line4 unless business_address_line4 == SKIP
      @business_address_line5 = business_address_line5 unless business_address_line5 == SKIP
      @business_city = business_city unless business_city == SKIP
      @business_region = business_region unless business_region == SKIP
      @business_country = business_country unless business_country == SKIP
      @business_postal_code = business_postal_code unless business_postal_code == SKIP
      @business_premise_number = business_premise_number unless business_premise_number == SKIP
      @business_type = business_type unless business_type == SKIP
      @driver_license_id = driver_license_id unless driver_license_id == SKIP
      @passport_id = passport_id unless passport_id == SKIP
      @government_id_type = government_id_type unless government_id_type == SKIP
      @government_id = government_id unless government_id == SKIP
      @phone_number = phone_number unless phone_number == SKIP
      @mobile_number = mobile_number unless mobile_number == SKIP
      @phone_number_country = phone_number_country unless phone_number_country == SKIP
      @mobile_number_country = mobile_number_country unless mobile_number_country == SKIP
      @address_line1 = address_line1 unless address_line1 == SKIP
      @address_line2 = address_line2 unless address_line2 == SKIP
      @address_line3 = address_line3 unless address_line3 == SKIP
      @address_line4 = address_line4 unless address_line4 == SKIP
      @address_line5 = address_line5 unless address_line5 == SKIP
      @city = city unless city == SKIP
      @region = region unless region == SKIP
      @country = country unless country == SKIP
      @postal_code = postal_code unless postal_code == SKIP
      @premise_number = premise_number unless premise_number == SKIP
      @address_type = address_type unless address_type == SKIP
      @email = email unless email == SKIP
      @employer_id = employer_id unless employer_id == SKIP
      @gender = gender unless gender == SKIP
      @user_type = user_type unless user_type == SKIP
      @program_user_id = program_user_id unless program_user_id == SKIP
      @language = language unless language == SKIP
      @country_of_birth = country_of_birth unless country_of_birth == SKIP
      @country_of_nationality = country_of_nationality unless country_of_nationality == SKIP
      @occupation = occupation unless occupation == SKIP
      @tax_resident_status = tax_resident_status unless tax_resident_status == SKIP
      @currency = currency unless currency == SKIP
      @token = token unless token == SKIP
      @status = status unless status == SKIP
      @created_on = created_on unless created_on == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      phone_number = hash.key?('phoneNumber') ? hash['phoneNumber'] : SKIP
      mobile_number = hash.key?('mobileNumber') ? hash['mobileNumber'] : SKIP
      phone_number_country =
        hash.key?('phoneNumberCountry') ? hash['phoneNumberCountry'] : SKIP
      mobile_number_country =
        hash.key?('mobileNumberCountry') ? hash['mobileNumberCountry'] : SKIP
      first_name = hash.key?('firstName') ? hash['firstName'] : SKIP
      last_name = hash.key?('lastName') ? hash['lastName'] : SKIP
      date_of_birth = hash.key?('dateOfBirth') ? hash['dateOfBirth'] : SKIP
      business_name = hash.key?('businessName') ? hash['businessName'] : SKIP
      business_operating_name =
        hash.key?('businessOperatingName') ? hash['businessOperatingName'] : SKIP
      business_registration_id =
        hash.key?('businessRegistrationId') ? hash['businessRegistrationId'] : SKIP
      business_registration_region =
        hash.key?('businessRegistrationRegion') ? hash['businessRegistrationRegion'] : SKIP
      business_registration_country =
        hash.key?('businessRegistrationCountry') ? hash['businessRegistrationCountry'] : SKIP
      business_contact_role =
        hash.key?('businessContactRole') ? hash['businessContactRole'] : SKIP
      business_address_line1 =
        hash.key?('businessAddressLine1') ? hash['businessAddressLine1'] : SKIP
      business_address_line2 =
        hash.key?('businessAddressLine2') ? hash['businessAddressLine2'] : SKIP
      business_address_line3 =
        hash.key?('businessAddressLine3') ? hash['businessAddressLine3'] : SKIP
      business_address_line4 =
        hash.key?('businessAddressLine4') ? hash['businessAddressLine4'] : SKIP
      business_address_line5 =
        hash.key?('businessAddressLine5') ? hash['businessAddressLine5'] : SKIP
      business_city = hash.key?('businessCity') ? hash['businessCity'] : SKIP
      business_region =
        hash.key?('businessRegion') ? hash['businessRegion'] : SKIP
      business_country =
        hash.key?('businessCountry') ? hash['businessCountry'] : SKIP
      business_postal_code =
        hash.key?('businessPostalCode') ? hash['businessPostalCode'] : SKIP
      business_premise_number =
        hash.key?('businessPremiseNumber') ? hash['businessPremiseNumber'] : SKIP
      business_type = hash.key?('businessType') ? hash['businessType'] : SKIP
      driver_license_id =
        hash.key?('driverLicenseId') ? hash['driverLicenseId'] : SKIP
      passport_id = hash.key?('passportId') ? hash['passportId'] : SKIP
      government_id_type =
        hash.key?('governmentIdType') ? hash['governmentIdType'] : SKIP
      government_id = hash.key?('governmentId') ? hash['governmentId'] : SKIP
      address_line1 = hash.key?('addressLine1') ? hash['addressLine1'] : SKIP
      address_line2 = hash.key?('addressLine2') ? hash['addressLine2'] : SKIP
      address_line3 = hash.key?('addressLine3') ? hash['addressLine3'] : SKIP
      address_line4 = hash.key?('addressLine4') ? hash['addressLine4'] : SKIP
      address_line5 = hash.key?('addressLine5') ? hash['addressLine5'] : SKIP
      city = hash.key?('city') ? hash['city'] : SKIP
      region = hash.key?('region') ? hash['region'] : SKIP
      country = hash.key?('country') ? hash['country'] : SKIP
      postal_code = hash.key?('postalCode') ? hash['postalCode'] : SKIP
      premise_number = hash.key?('premiseNumber') ? hash['premiseNumber'] : SKIP
      address_type = hash.key?('addressType') ? hash['addressType'] : SKIP
      email = hash.key?('email') ? hash['email'] : SKIP
      employer_id = hash.key?('employerId') ? hash['employerId'] : SKIP
      gender = hash.key?('gender') ? hash['gender'] : SKIP
      user_type = hash.key?('userType') ? hash['userType'] : SKIP
      program_user_id =
        hash.key?('programUserId') ? hash['programUserId'] : SKIP
      language = hash.key?('language') ? hash['language'] : SKIP
      country_of_birth =
        hash.key?('countryOfBirth') ? hash['countryOfBirth'] : SKIP
      country_of_nationality =
        hash.key?('countryOfNationality') ? hash['countryOfNationality'] : SKIP
      occupation = hash.key?('occupation') ? hash['occupation'] : SKIP
      tax_resident_status =
        hash.key?('taxResidentStatus') ? hash['taxResidentStatus'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      token = hash.key?('token') ? hash['token'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      created_on = if hash.key?('createdOn')
                     (DateTimeHelper.from_rfc3339(hash['createdOn']) if hash['createdOn'])
                   else
                     SKIP
                   end

      # Create object from extracted values.
      User.new(phone_number,
               mobile_number,
               phone_number_country,
               mobile_number_country,
               first_name,
               last_name,
               date_of_birth,
               business_name,
               business_operating_name,
               business_registration_id,
               business_registration_region,
               business_registration_country,
               business_contact_role,
               business_address_line1,
               business_address_line2,
               business_address_line3,
               business_address_line4,
               business_address_line5,
               business_city,
               business_region,
               business_country,
               business_postal_code,
               business_premise_number,
               business_type,
               driver_license_id,
               passport_id,
               government_id_type,
               government_id,
               address_line1,
               address_line2,
               address_line3,
               address_line4,
               address_line5,
               city,
               region,
               country,
               postal_code,
               premise_number,
               address_type,
               email,
               employer_id,
               gender,
               user_type,
               program_user_id,
               language,
               country_of_birth,
               country_of_nationality,
               occupation,
               tax_resident_status,
               currency,
               token,
               status,
               created_on)
    end

    def to_created_on
      DateTimeHelper.to_rfc3339(created_on)
    end
  end
end
