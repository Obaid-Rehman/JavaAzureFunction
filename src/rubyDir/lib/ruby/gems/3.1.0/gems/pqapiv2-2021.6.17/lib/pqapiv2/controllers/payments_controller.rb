# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Pqapiv2
  # PaymentsController
  class PaymentsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Retrieve a list of all payments that supports filtering, sorting, and
    # pagination through existing mechanisms.
    # @param [String] pmnt_token Required parameter: Auto-generated unique
    # identifier representing an individual payment transaction and quote,
    # prefixed with <i>pmnt-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [String] filter Optional parameter: Filter request results by
    # specific criteria.
    # @param [LanguageTypesEnum] language Optional parameter: Filter results by
    # language type.
    # @return [PaymentResponse] response from the API call
    def retrieve_payment(pmnt_token,
                         x_my_pay_quicker_version,
                         filter: nil,
                         language: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/payments/{pmnt-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'pmnt-token' => { 'value' => pmnt_token, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'filter' => filter,
        'language' => language
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      PaymentResponse.from_hash(decoded)
    end

    # Accept an open payment quote.
    # @param [String] pmnt_token Required parameter: Auto-generated unique
    # identifier representing an individual payment transaction and quote,
    # prefixed with <i>pmnt-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Object] body Optional parameter: Example:
    # @return [PaymentResponse] response from the API call
    def accept_payment_quote(pmnt_token,
                             x_my_pay_quicker_version,
                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/payments/{pmnt-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'pmnt-token' => { 'value' => pmnt_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version,
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      PaymentResponse.from_hash(decoded)
    end

    # Cancel an open payment quote.
    # @param [String] pmnt_token Required parameter: Auto-generated unique
    # identifier representing an individual payment transaction and quote,
    # prefixed with <i>pmnt-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [void] response from the API call
    def cancel_payment_quote(pmnt_token,
                             x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/payments/{pmnt-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'pmnt-token' => { 'value' => pmnt_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Perform a payment retraction for the full payment amount.
    # @param [String] pmnt_token Required parameter: Auto-generated unique
    # identifier representing an individual payment transaction and quote,
    # prefixed with <i>pmnt-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [void] response from the API call
    def retract_payment_full(pmnt_token,
                             x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/payments/{pmnt-token}/retract'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'pmnt-token' => { 'value' => pmnt_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Perform a payment retraction for a partial payment amount.
    # @param [String] pmnt_token Required parameter: Auto-generated unique
    # identifier representing an individual payment transaction and quote,
    # prefixed with <i>pmnt-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [void] response from the API call
    def retract_payment_partial(pmnt_token,
                                x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/payments/{pmnt-token}/retract'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'pmnt-token' => { 'value' => pmnt_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.patch(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Retrieve a list of all payments that supports filtering, sorting, and
    # pagination through existing mechanisms.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Integer] page Optional parameter: Page number of specific page to
    # return
    # @param [Integer] page_size Optional parameter: Number of items to be
    # displayed per page
    # @param [String] filter Optional parameter: Filter request results by
    # specific criteria.
    # @param [String] sort Optional parameter: Sort request results by specific
    # attribute.
    # @param [LanguageTypesEnum] language Optional parameter: Filter results by
    # language type.
    # @return [PaymentsCollectionResponse] response from the API call
    def list_payments(x_my_pay_quicker_version,
                      page: nil,
                      page_size: 20,
                      filter: nil,
                      sort: nil,
                      language: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/payments'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'pageSize' => page_size,
        'filter' => filter,
        'sort' => sort,
        'language' => language
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      PaymentsCollectionResponse.from_hash(decoded)
    end

    # Create a payment quote.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [PaymentRequest] body Optional parameter: Example:
    # @return [PaymentResponse] response from the API call
    def create_payment_quote(x_my_pay_quicker_version,
                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/payments'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version,
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      PaymentResponse.from_hash(decoded)
    end
  end
end
