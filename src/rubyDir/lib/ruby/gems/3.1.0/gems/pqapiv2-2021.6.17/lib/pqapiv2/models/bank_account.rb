# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Pqapiv2
  # Unique identifier for the bank account
  class BankAccount < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Token representing the resource, prefixed with <i>user-</i>, <i>dest-</i>,
    # <i>xfer-</i>, <i>acct-</i>, <i>pmnt-</i>, or <i>docu-</i>.
    # @return [String]
    attr_accessor :token

    # Current verification status type of the bank account
    # @return [BankAccountStatusTypesEnum]
    attr_accessor :status

    # Time at which the object was created.
    # @return [DateTime]
    attr_accessor :created_on

    # Account ownership types
    # @return [BankAccountOwnershipTypesEnum]
    attr_accessor :bank_account_ownership_type

    # Financial purpose of the bank account (<i>Savings</i>, <i>Investment</i>)
    # @return [BankAccountTypesEnum]
    attr_accessor :type

    # Financial purpose of the bank account (<i>Savings</i>, <i>Investment</i>)
    # @return [List of KeyValuePairBankFieldTypesString]
    attr_accessor :fields

    # Currency code type for the object
    # @return [CurrencyTypesEnum]
    attr_accessor :bank_currency

    # Two-digit country code types
    # @return [CountryTypesEnum]
    attr_accessor :bank_country

    # User-supplied description of the bank account for reference
    # @return [String]
    attr_accessor :description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['token'] = 'token'
      @_hash['status'] = 'status'
      @_hash['created_on'] = 'createdOn'
      @_hash['bank_account_ownership_type'] = 'bankAccountOwnershipType'
      @_hash['type'] = 'type'
      @_hash['fields'] = 'fields'
      @_hash['bank_currency'] = 'bankCurrency'
      @_hash['bank_country'] = 'bankCountry'
      @_hash['description'] = 'description'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        token
        status
        created_on
        bank_account_ownership_type
        type
        fields
        bank_currency
        bank_country
        description
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(token = nil,
                   status = nil,
                   created_on = nil,
                   bank_account_ownership_type = nil,
                   type = nil,
                   fields = nil,
                   bank_currency = nil,
                   bank_country = nil,
                   description = nil)
      @token = token unless token == SKIP
      @status = status unless status == SKIP
      @created_on = created_on unless created_on == SKIP
      unless bank_account_ownership_type == SKIP
        @bank_account_ownership_type =
          bank_account_ownership_type
      end
      @type = type unless type == SKIP
      @fields = fields unless fields == SKIP
      @bank_currency = bank_currency unless bank_currency == SKIP
      @bank_country = bank_country unless bank_country == SKIP
      @description = description unless description == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      token = hash.key?('token') ? hash['token'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      created_on = if hash.key?('createdOn')
                     (DateTimeHelper.from_rfc3339(hash['createdOn']) if hash['createdOn'])
                   else
                     SKIP
                   end
      bank_account_ownership_type =
        hash.key?('bankAccountOwnershipType') ? hash['bankAccountOwnershipType'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP
      # Parameter is an array, so we need to iterate through it
      fields = nil
      unless hash['fields'].nil?
        fields = []
        hash['fields'].each do |structure|
          fields << (KeyValuePairBankFieldTypesString.from_hash(structure) if structure)
        end
      end

      fields = SKIP unless hash.key?('fields')
      bank_currency = hash.key?('bankCurrency') ? hash['bankCurrency'] : SKIP
      bank_country = hash.key?('bankCountry') ? hash['bankCountry'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP

      # Create object from extracted values.
      BankAccount.new(token,
                      status,
                      created_on,
                      bank_account_ownership_type,
                      type,
                      fields,
                      bank_currency,
                      bank_country,
                      description)
    end

    def to_created_on
      DateTimeHelper.to_rfc3339(created_on)
    end
  end
end
