# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Pqapiv2
  # Base for the receipt
  class ReceiptBase < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Formatted monetary amount
    # @return [String]
    attr_accessor :formatted_amount

    # Amount of the transfer in the specified currency.
    # @return [Float]
    attr_accessor :amount

    # Currency code type for the object
    # @return [CurrencyTypesEnum]
    attr_accessor :currency

    # Unique identifier representing the source of funds.
    # @return [String]
    attr_accessor :source_token

    # Unique identifier representing the destination of funds.
    # @return [String]
    attr_accessor :destination_token

    # Time at which the object was created.
    # @return [DateTime]
    attr_accessor :created_on

    # Token representing the resource, prefixed with <i>user-</i>, <i>dest-</i>,
    # <i>xfer-</i>, <i>acct-</i>, <i>pmnt-</i>, or <i>docu-</i>.
    # @return [String]
    attr_accessor :token

    # Current status of a transfer
    # @return [TransferStatusTypesEnum]
    attr_accessor :status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['formatted_amount'] = 'formattedAmount'
      @_hash['amount'] = 'amount'
      @_hash['currency'] = 'currency'
      @_hash['source_token'] = 'sourceToken'
      @_hash['destination_token'] = 'destinationToken'
      @_hash['created_on'] = 'createdOn'
      @_hash['token'] = 'token'
      @_hash['status'] = 'status'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        formatted_amount
        source_token
        destination_token
        created_on
        token
        status
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(amount = nil,
                   currency = nil,
                   formatted_amount = nil,
                   source_token = nil,
                   destination_token = nil,
                   created_on = nil,
                   token = nil,
                   status = nil)
      @formatted_amount = formatted_amount unless formatted_amount == SKIP
      @amount = amount unless amount == SKIP
      @currency = currency unless currency == SKIP
      @source_token = source_token unless source_token == SKIP
      @destination_token = destination_token unless destination_token == SKIP
      @created_on = created_on unless created_on == SKIP
      @token = token unless token == SKIP
      @status = status unless status == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      formatted_amount =
        hash.key?('formattedAmount') ? hash['formattedAmount'] : SKIP
      source_token = hash.key?('sourceToken') ? hash['sourceToken'] : SKIP
      destination_token =
        hash.key?('destinationToken') ? hash['destinationToken'] : SKIP
      created_on = if hash.key?('createdOn')
                     (DateTimeHelper.from_rfc3339(hash['createdOn']) if hash['createdOn'])
                   else
                     SKIP
                   end
      token = hash.key?('token') ? hash['token'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP

      # Create object from extracted values.
      ReceiptBase.new(amount,
                      currency,
                      formatted_amount,
                      source_token,
                      destination_token,
                      created_on,
                      token,
                      status)
    end

    def to_created_on
      DateTimeHelper.to_rfc3339(created_on)
    end
  end
end
