# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Pqapiv2
  # BankAccountsController
  class BankAccountsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Retrieve a list of bank accounts that supports filtering, sorting, and
    # pagination through existing mechanisms.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Integer] page Optional parameter: Page number of specific page to
    # return
    # @param [Integer] page_size Optional parameter: Number of items to be
    # displayed per page
    # @param [String] filter Optional parameter: Filter request results by
    # specific criteria.
    # @param [String] sort Optional parameter: Sort request results by specific
    # attribute.
    # @param [LanguageTypesEnum] language Optional parameter: Filter results by
    # language type.
    # @return [BankAccountCollectionResponse] response from the API call
    def list_bank_accounts(user_token,
                           x_my_pay_quicker_version,
                           page: nil,
                           page_size: 20,
                           filter: nil,
                           sort: nil,
                           language: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/bank-accounts'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'pageSize' => page_size,
        'filter' => filter,
        'sort' => sort,
        'language' => language
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      BankAccountCollectionResponse.from_hash(decoded)
    end

    # Create a quote for a bank account using a user token.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [BankAccountFields] body Optional parameter: Example:
    # @return [BankAccountResponse] response from the API call
    def create_bank_account(user_token,
                            x_my_pay_quicker_version,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/bank-accounts'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version,
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      BankAccountResponse.from_hash(decoded)
    end

    # Retrieve a list of bank accounts using a destination token that supports
    # filtering, sorting, and pagination through existing mechanisms.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] dest_token Required parameter: Auto-generated unique
    # identifier representing a transfer destination, including prepaid cards,
    # bank accounts, paper checks, and other users, prefixed with <i>dest->.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Integer] page Optional parameter: Page number of specific page to
    # return
    # @param [Integer] page_size Optional parameter: Number of items to be
    # displayed per page
    # @param [String] filter Optional parameter: Filter request results by
    # specific criteria.
    # @param [String] sort Optional parameter: Sort request results by specific
    # attribute.
    # @param [LanguageTypesEnum] language Optional parameter: Filter results by
    # language type.
    # @return [BankAccountResponse] response from the API call
    def retrieve_bank_account(user_token,
                              dest_token,
                              x_my_pay_quicker_version,
                              page: nil,
                              page_size: 20,
                              filter: nil,
                              sort: nil,
                              language: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/bank-accounts/{dest-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true },
        'dest-token' => { 'value' => dest_token, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'pageSize' => page_size,
        'filter' => filter,
        'sort' => sort,
        'language' => language
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      BankAccountResponse.from_hash(decoded)
    end

    # Update a bank account.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] dest_token Required parameter: Auto-generated unique
    # identifier representing a transfer destination, including prepaid cards,
    # bank accounts, paper checks, and other users, prefixed with <i>dest->.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [BankAccountFields] body Optional parameter: Example:
    # @return [BankAccountResponse] response from the API call
    def update_bank_account(user_token,
                            dest_token,
                            x_my_pay_quicker_version,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/bank-accounts/{dest-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true },
        'dest-token' => { 'value' => dest_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version,
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      BankAccountResponse.from_hash(decoded)
    end

    # Delete (cloak) a user bank account.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] dest_token Required parameter: Auto-generated unique
    # identifier representing a transfer destination, including prepaid cards,
    # bank accounts, paper checks, and other users, prefixed with <i>dest->.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [void] response from the API call
    def delete_bank_account(user_token,
                            dest_token,
                            x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/bank-accounts/{dest-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true },
        'dest-token' => { 'value' => dest_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Retrieve requirements for adding a bank account using the parameters
    # provided (user context, given country of residence, supported EFT
    # provider(s), destination currency, destination country, required fields,
    # with names, and regex validation expression) for easy customer wire-up and
    # validation.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Integer] page Optional parameter: Page number of specific page to
    # return
    # @param [Integer] page_size Optional parameter: Number of items to be
    # displayed per page
    # @param [String] filter Optional parameter: Filter request results by
    # specific criteria.
    # @param [String] sort Optional parameter: Sort request results by specific
    # attribute.
    # @param [LanguageTypesEnum] language Optional parameter: Filter results by
    # language type.
    # @return [BankAccountRequirementCollectionResponse] response from the API call
    def get_bank_account_requirements(user_token,
                                      x_my_pay_quicker_version,
                                      page: nil,
                                      page_size: 20,
                                      filter: nil,
                                      sort: nil,
                                      language: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/bank-accounts/requirements'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'pageSize' => page_size,
        'filter' => filter,
        'sort' => sort,
        'language' => language
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      BankAccountRequirementCollectionResponse.from_hash(decoded)
    end
  end
end
