# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class BankAccountsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    @response_catcher = HttpResponseCatcher.new
    @controller = BankAccountsController.new CONFIG, http_call_back: @response_catcher
  end

  # Retrieve a list of bank accounts that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_bank_accounts()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.list_bank_accounts(user_token, x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"payload":[{"token":"dest-7d8b1c83-01bb-40fb-87d7-26bd4c303f01","statu'\
      's":"DELETED","createdOn":"2020-02-21T22:00:00Z","bankAccountOwnershipTy'\
      'pe":"PERSONAL","type":"CHECKING","fields":[{"key":"BANK_ACH_ABA","value'\
      '":"333333333"},{"key":"BANK_BBAN","value":"4444444444"}],"bankCurrency"'\
      ':"USD","bankCountry":"US","description":"My account","links":[{"params"'\
      ':{"rel":"self"},"href":"string"}]},{"token":"dest-efacd12b-a86e-4f44-bb'\
      'ea-927955ec1634","status":"ACTIVE","createdOn":"2020-02-21T22:00:00Z","'\
      'bankAccountOwnershipType":"PERSONAL","type":"CHECKING","fields":[{"key"'\
      ':"BANK_ACH_ABA","value":"012346789"},{"key":"BANK_BBAN","value":"987654'\
      '321"}],"bankCurrency":"USD","bankCountry":"US","description":"Personal '\
      'checking account","links":[{"params":{"rel":"self"},"href":"string"}]}]'\
      ',"links":[{"params":{"rel":"self"},"href":"string"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Create a quote for a bank account using a user token.
  def test_create_bank_account()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    x_my_pay_quicker_version = '2020.02.24'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.create_bank_account(user_token, x_my_pay_quicker_version, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"token":"dest-efacd12b-a86e-4f44-bbea-927955ec1634","status":"ACTIVE",'\
      '"createdOn":"2020-02-21T22:00:00Z","bankAccountOwnershipType":"PERSONAL'\
      '","type":"CHECKING","fields":[{"key":"BANK_ACH_ABA","value":"012346789"'\
      '},{"key":"BANK_BBAN","value":"987654321"}],"bankCurrency":"USD","bankCo'\
      'untry":"US","description":"Personal checking account","links":[{"params'\
      '":{"rel":"self"},"href":"string"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve a list of bank accounts using a destination token that supports filtering, sorting, and pagination through existing mechanisms.
  def test_retrieve_bank_account()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    dest_token = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79'
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.retrieve_bank_account(user_token, dest_token, x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"token":"dest-efacd12b-a86e-4f44-bbea-927955ec1634","status":"ACTIVE",'\
      '"createdOn":"2020-02-21T22:00:00Z","bankAccountOwnershipType":"PERSONAL'\
      '","type":"CHECKING","fields":[{"key":"BANK_ACH_ABA","value":"012346789"'\
      '},{"key":"BANK_BBAN","value":"987654321"}],"bankCurrency":"USD","bankCo'\
      'untry":"US","description":"Personal checking account","links":[{"params'\
      '":{"rel":"self"},"href":"string"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Update a bank account.
  def test_update_bank_account()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    dest_token = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79'
    x_my_pay_quicker_version = '2020.02.24'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.update_bank_account(user_token, dest_token, x_my_pay_quicker_version, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"token":"dest-efacd12b-a86e-4f44-bbea-927955ec1634","status":"ACTIVE",'\
      '"createdOn":"2020-02-21T22:00:00Z","bankAccountOwnershipType":"PERSONAL'\
      '","type":"CHECKING","fields":[{"key":"BANK_ACH_ABA","value":"012346789"'\
      '},{"key":"BANK_BBAN","value":"987654321"}],"bankCurrency":"USD","bankCo'\
      'untry":"US","description":"Personal checking account","links":[{"params'\
      '":{"rel":"self"},"href":"string"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Delete (cloak) a user bank account.
  def test_delete_bank_account()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    dest_token = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79'
    x_my_pay_quicker_version = '2020.02.24'

    # Perform the API call through the SDK function
    @controller.delete_bank_account(user_token, dest_token, x_my_pay_quicker_version)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Retrieve requirements for adding a bank account using the parameters provided (user context, given country of residence, supported EFT provider(s), destination currency, destination country, required fields, with names, and regex validation expression) for easy customer wire-up and validation.
  def test_get_bank_account_requirements()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.get_bank_account_requirements(user_token, x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"payload":[{"bankCountry":"IT","bankCurrency":"EUR","requirements":[{"'\
      'requirement":"BANK_IBAN","format":{"example":"IT43K03104127010000008204'\
      '20","legend":[{"key":"IT43K0310412701000000820420","descriptions":[{"la'\
      'nguage":"en-US","translation":"Example IBAN"},{"language":"it-IT","tran'\
      'slation":"Esempio IBAN"}]}]},"description":[{"language":"en-US","transl'\
      'ation":"IBAN"},{"language":"it-IT","translation":"IBAN"}],"validators":'\
      '[{"validatorType":"REGEX","expression":"^IT\\\\\\\\d{2}[A-Z]\\\\\\\\d{1'\
      '0}[0-9A-Z]{12}$"}]},{"requirement":"BANK_SWIFT_BIC","format":{"example"'\
      ':"01234567890","legend":[{"key":"01234567890","descriptions":[{"languag'\
      'e":"en-US","translation":"Example Swift/BIC"},{"language":"it-IT","tran'\
      'slation":"Esempio Swift/BIC"}]}]},"description":[{"language":"en-US","t'\
      'ranslation":"Swift/BIC"},{"language":"it-IT","translation":"Swift/BIC"}'\
      '],"validators":[{"validatorType":"REGEX","expression":"^[a-z0-9A-Z]{8,1'\
      '1}$"}]}],"quote":{"formattedAmount":"$4.32 USD (USD, en-US), 0,00 € EUR'\
      ' (EUR, fr-FR)","amount":4.32,"currency":"USD"},"links":[{"params":{"rel'\
      '":"self"},"href":"string"}]}],"links":[{"params":{"rel":"self"},"href":'\
      '"string"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

end
