# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class PrepaidCardsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    @response_catcher = HttpResponseCatcher.new
    @controller = PrepaidCardsController.new CONFIG, http_call_back: @response_catcher
  end

  # Replace an existing Prepaid Card specifying the replacement reason and the card package for the replacement card.
  def test_replace_prepaid_card()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    dest_token = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79'
    x_my_pay_quicker_version = '2020.02.24'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.replace_prepaid_card(user_token, dest_token, x_my_pay_quicker_version, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"token":"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d","status":"QUEUED",'\
      '"createdOn":"2020-02-21T22:00:00Z","country":"US","currency":"USD","car'\
      'dPersonalization":"PERSONALIZED","cardPackage":"blue_consumer_10k","car'\
      'dNetwork":"VISA","expires":"2023-02-21T00:00:00Z","cardNumber":"1234 56'\
      '** **** 1234","cvv":"123","links":[{"params":{"rel":"self"},"href":"htt'\
      'ps://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/dest-37ba'\
      '1fb7-6136-4216-bb13-f903af6b9f0d"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve Prepaid Card details by destination token.
  def test_retrieve_prepaid_card()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    dest_token = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79'
    x_my_pay_quicker_version = '2020.02.24'

    # Perform the API call through the SDK function
    result = @controller.retrieve_prepaid_card(user_token, dest_token, x_my_pay_quicker_version)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"token":"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d","status":"QUEUED",'\
      '"createdOn":"2020-02-21T22:00:00Z","country":"US","currency":"USD","car'\
      'dPersonalization":"PERSONALIZED","cardPackage":"blue_consumer_10k","car'\
      'dNetwork":"VISA","expires":"2023-02-21T00:00:00Z","cardNumber":"1234 56'\
      '** **** 1234","cvv":"123","links":[{"params":{"rel":"self"},"href":"htt'\
      'ps://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/dest-37ba'\
      '1fb7-6136-4216-bb13-f903af6b9f0d"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Partial Prepaid Card update typically used when modifying card status. <i>*Does not require the entire object be passed in the request</i>
  def test_update_prepaid_card_partial()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    dest_token = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79'
    x_my_pay_quicker_version = '2020.02.24'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.update_prepaid_card_partial(user_token, dest_token, x_my_pay_quicker_version, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"token":"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d","status":"LOCKED",'\
      '"createdOn":"2020-02-21T22:00:00Z","country":"US","currency":"USD","car'\
      'dPersonalization":"PERSONALIZED","cardPackage":"blue_consumer_10k","car'\
      'dNetwork":"VISA","expires":"2023-02-21T00:00:00Z","cardNumber":"1234 56'\
      '** **** 1234","cvv":"123","links":[{"params":{"rel":"self"},"href":"htt'\
      'ps://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/dest-37ba'\
      '1fb7-6136-4216-bb13-f903af6b9f0d"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve one part of a two-part token required to reveal or set a client side PIN. <i>*Not all programs support a reveal or set PIN operation.</i>
  def test_generate_pin_operation_token()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    dest_token = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79'
    x_my_pay_quicker_version = '2020.02.24'

    # Perform the API call through the SDK function
    result = @controller.generate_pin_operation_token(user_token, dest_token, x_my_pay_quicker_version)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Retrieve a list of all pre-paid cards by user token that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_prepaid_cards()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.list_prepaid_cards(user_token, x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"payload":[{"token":"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d","statu'\
      's":"QUEUED","createdOn":"2020-02-21T22:00:00Z","country":"US","currency'\
      '":"USD","cardPersonalization":"PERSONALIZED","cardPackage":"blue_consum'\
      'er_10k","cardNetwork":"VISA","expires":"2023-02-21T00:00:00Z","cardNumb'\
      'er":"1234 56** **** 1234","cvv":"123","links":[{"params":{"rel":"self"}'\
      ',"href":"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-car'\
      'ds/dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d"}]}],"links":[{"params":{"'\
      'rel":"self"},"href":"https://platform.mypayquicker.com/api/v2/users/xxx'\
      '/prepaid-cards"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Order a pre-paid card for the user by specifying a cardPackage. <i>*A package defines the type of card, currency, artwork utilized, and often the method of delivery.</i>
  def test_order_prepaid_card()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    x_my_pay_quicker_version = '2020.02.24'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.order_prepaid_card(user_token, x_my_pay_quicker_version, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"token":"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d","status":"QUEUED",'\
      '"createdOn":"2020-02-21T22:00:00Z","country":"US","currency":"USD","car'\
      'dPersonalization":"PERSONALIZED","cardPackage":"blue_consumer_10k","car'\
      'dNetwork":"VISA","expires":"2023-02-21T00:00:00Z","cardNumber":"1234 56'\
      '** **** 1234","cvv":"123","links":[{"params":{"rel":"self"},"href":"htt'\
      'ps://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/dest-37ba'\
      '1fb7-6136-4216-bb13-f903af6b9f0d"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

end
