# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Pqapiv2
  # UsersController
  class UsersController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Update a user object (change email, address change, etc.) using a user
    # token.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [UserBase] body Optional parameter: Example:
    # @return [UserResponse] response from the API call
    def update_user(user_token,
                    x_my_pay_quicker_version,
                    body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version,
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      UserResponse.from_hash(decoded)
    end

    # Retrieve a single user record by user token.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [UserResponse] response from the API call
    def retrieve_user(user_token,
                      x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      UserResponse.from_hash(decoded)
    end

    # Retrieve a list of all users that supports filtering, sorting, and
    # pagination through existing mechanisms.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Integer] page Optional parameter: Page number of specific page to
    # return
    # @param [Integer] page_size Optional parameter: Number of items to be
    # displayed per page
    # @param [String] filter Optional parameter: Filter request results by
    # specific criteria.
    # @param [String] sort Optional parameter: Sort request results by specific
    # attribute.
    # @param [LanguageTypesEnum] language Optional parameter: Filter results by
    # language type.
    # @return [UserCollectionResponse] response from the API call
    def list_users(x_my_pay_quicker_version,
                   page: nil,
                   page_size: 20,
                   filter: nil,
                   sort: nil,
                   language: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'pageSize' => page_size,
        'filter' => filter,
        'sort' => sort,
        'language' => language
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      UserCollectionResponse.from_hash(decoded)
    end

    # Create a new user. Payload contains both required and optional fields for
    # user- and company-based users, allowing for the creation of a
    # corporate/partnership/dba (i.e., Grubhub model) user along with a standard
    # end user (i.e., <i>Payee</i>). The type of the user (<i>Business</i> vs.
    # <i>User</i>) and type of business (<i>Corporation</i> vs.
    # <i>Partnership</i>) provide context that impacts KYC etc.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [UserBase] body Required parameter: Body details of the request
    # @return [UserResponse] response from the API call
    def create_user(x_my_pay_quicker_version,
                    body)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version,
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      UserResponse.from_hash(decoded)
    end

    # Retrieve a list of IDV checks by user token that supports filtering,
    # sorting, and pagination through existing mechanisms.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [IdentityVerificationCollectionResponse] response from the API call
    def list_user_idv_checks(user_token,
                             x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/idv-checks'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      IdentityVerificationCollectionResponse.from_hash(decoded)
    end

    # Retrieve a list of all IDV check by IDVC token that supports filtering,
    # sorting, and pagination through existing mechanisms.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] idvc_token Required parameter: Auto-generated unique
    # identifier representing a user IDV check, prefixed with <i>idvc-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [IdentityVerificationResponse] response from the API call
    def retrieve_user_idv_check(user_token,
                                idvc_token,
                                x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/idv-checks/{idvc-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true },
        'idvc-token' => { 'value' => idvc_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      IdentityVerificationResponse.from_hash(decoded)
    end

    # Retrieve a list of all user events that supports filtering, sorting, and
    # pagination through existing mechanisms.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @return [void] response from the API call
    def list_user_events(user_token)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/events'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Retrieve a single user event
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] evnt_token Required parameter: Auto-generated unique
    # identifier representing an event, prefixed with <i>evnt-</i>.
    # @return [void] response from the API call
    def retrieve_user_event(user_token,
                            evnt_token)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/events/{evnt-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true },
        'evnt-token' => { 'value' => evnt_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Accept a single program agreement
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] agmt_token Required parameter: Auto-generated unique
    # identifier representing a program agreement, prefixed with <i>agmt-</i>.
    # @return [void] response from the API call
    def accept_program_agreement(user_token,
                                 agmt_token)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/agreements/{agmt-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true },
        'agmt-token' => { 'value' => agmt_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Retrieve a list of all accepted program agreements that supports
    # filtering, sorting, and pagination through existing mechanisms.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @return [void] response from the API call
    def list_accepted_program_agreements(user_token)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/agreements'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)
      validate_response(_response)
    end
  end
end
