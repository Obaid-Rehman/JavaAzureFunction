# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Pqapiv2
  # SpendBackController
  class SpendBackController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Retrieve a single spendback quote using the spendback token.
    # @param [String] spnd_token Required parameter: Auto-generated unique
    # identifier representing an individual spendback transaction and quote,
    # prefixed with <i>spnd-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Integer] page Optional parameter: Page number of specific page to
    # return
    # @param [Integer] page_size Optional parameter: Number of items to be
    # displayed per page
    # @param [String] filter Optional parameter: Filter request results by
    # specific criteria.
    # @param [String] sort Optional parameter: Sort request results by specific
    # attribute.
    # @param [LanguageTypesEnum] language Optional parameter: Filter results by
    # language type.
    # @return [void] response from the API call
    def retrieve_spendback(spnd_token,
                           x_my_pay_quicker_version,
                           page: nil,
                           page_size: 20,
                           filter: nil,
                           sort: nil,
                           language: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/spend-back/{spnd-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'spnd-token' => { 'value' => spnd_token, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'pageSize' => page_size,
        'filter' => filter,
        'sort' => sort,
        'language' => language
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Accept an open spendback quote.
    # @param [String] spnd_token Required parameter: Auto-generated unique
    # identifier representing an individual spendback transaction and quote,
    # prefixed with <i>spnd-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [void] response from the API call
    def accept_spendback_quote(spnd_token,
                               x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/spend-back/{spnd-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'spnd-token' => { 'value' => spnd_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Cancel an open spendback quote.
    # @param [String] spnd_token Required parameter: Auto-generated unique
    # identifier representing an individual spendback transaction and quote,
    # prefixed with <i>spnd-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [void] response from the API call
    def cancel_spendback_quote(spnd_token,
                               x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/spend-back/{spnd-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'spnd-token' => { 'value' => spnd_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Perform a spendback refund for the full amount.
    # @param [String] spnd_token Required parameter: Auto-generated unique
    # identifier representing an individual spendback transaction and quote,
    # prefixed with <i>spnd-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [void] response from the API call
    def refund_spendback_full(spnd_token,
                              x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/spend-back/{spnd-token}/refund'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'spnd-token' => { 'value' => spnd_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Perform a spendback refund for a partial amount.
    # @param [String] spnd_token Required parameter: Auto-generated unique
    # identifier representing an individual spendback transaction and quote,
    # prefixed with <i>spnd-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [void] response from the API call
    def refund_spendback_partial(spnd_token,
                                 x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/spend-back/{spnd-token}/refund'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'spnd-token' => { 'value' => spnd_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.patch(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Retrieve a list of all spendbacks that supports filtering, sorting, and
    # pagination through existing mechanisms.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Integer] page Optional parameter: Page number of specific page to
    # return
    # @param [Integer] page_size Optional parameter: Number of items to be
    # displayed per page
    # @param [String] filter Optional parameter: Filter request results by
    # specific criteria.
    # @param [String] sort Optional parameter: Sort request results by specific
    # attribute.
    # @param [LanguageTypesEnum] language Optional parameter: Filter results by
    # language type.
    # @return [void] response from the API call
    def list_spend_backs(x_my_pay_quicker_version,
                         page: nil,
                         page_size: 20,
                         filter: nil,
                         sort: nil,
                         language: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/spend-back'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'pageSize' => page_size,
        'filter' => filter,
        'sort' => sort,
        'language' => language
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Create a spendback quote. <i>*Spendbacks can be automatically accepted by
    # setting the `autoAcceptQuote` flag. If not automatically accepted, a POST
    # is required to the spendback endpoint using the token returned in the
    # response. Quotes can be accepted, cancelled, or allowed to expire.</i>
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Object] body Optional parameter: Example:
    # @return [void] response from the API call
    def quote_spendback(x_my_pay_quicker_version,
                        body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/spend-back'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version,
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)
      validate_response(_response)
    end
  end
end
