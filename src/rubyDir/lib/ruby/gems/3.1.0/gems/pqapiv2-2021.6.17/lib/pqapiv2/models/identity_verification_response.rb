# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Pqapiv2
  # IdentityVerificationResponse Model.
  class IdentityVerificationResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # IDV provider unique ID for the IDV check performed
    # @return [String]
    attr_accessor :idv_provider_reference

    # In combination with the <i>Disposition</i> type, the <i>Result</i> type
    # provides the results of an IDV check. A <i>Dispositioned</i> result of
    # <i>FINAL PASS</i> represents a passing check, whereas a <i>TRANSIENT
    # FAIL</i> is still being processed but has failed at least one phase of the
    # check. Until the disposition is <i>FINAL</i>, a result has not been
    # determined.
    # @return [IdentityVerificationResultTypesEnum]
    attr_accessor :idv_result

    # If used by a provider, sub-results that give additional insight into the
    # results, including whether they result was <i>Soft</i> or <i>Hard</i>.
    # <i>Soft</i> results may have additional recourse that can be leveraged to
    # validate a userâ€™s identity.
    # @return [IdentityVerificationResultSubTypesEnum]
    attr_accessor :idv_sub_result

    # Provider types of verification that can be used for performing identity
    # checks
    # @return [IdentityVerificationProviderTypesEnum]
    attr_accessor :idv_provider

    # Time at which the object was created.
    # @return [DateTime]
    attr_accessor :created_on

    # Contains the raw (unprocessed) output from the IDV provider. Format of the
    # raw output can vary widely and is not documented. *For reference/debugging
    # only
    # @return [String]
    attr_accessor :raw

    # Types of verification used for performing identity checks
    # (<i>documentary</i>, <i>non-documentary</i>, <i>OFAC</i>, etc.)
    # @return [IdentityVerificationCheckTypesEnum]
    attr_accessor :idv_check_type

    # In combination with the <i>Disposition</i> type, the <i>Result</i> type
    # provides the results of an IDV check. A <i>Dispositioned</i> result of
    # <i>FINAL PASS</i> represents a passing check, whereas a <i>TRANSIENT
    # FAIL</i> is still being processed but has failed at least one phase of the
    # check. Until the disposition is <i>FINAL</i>, a result has not been
    # determined.
    # @return [IdentityVerificationDispositionTypesEnum]
    attr_accessor :idv_dispostion

    # Token representing the resource, prefixed with <i>user-</i>, <i>dest-</i>,
    # <i>xfer-</i>, <i>acct-</i>, <i>pmnt-</i>, or <i>docu-</i>.
    # @return [String]
    attr_accessor :token

    # Token representing the resource, prefixed with <i>user-</i>, <i>dest-</i>,
    # <i>xfer-</i>, <i>acct-</i>, <i>pmnt-</i>, or <i>docu-</i>.
    # @return [List of HaetosParams]
    attr_accessor :links

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['idv_provider_reference'] = 'idvProviderReference'
      @_hash['idv_result'] = 'idvResult'
      @_hash['idv_sub_result'] = 'idvSubResult'
      @_hash['idv_provider'] = 'idvProvider'
      @_hash['created_on'] = 'createdOn'
      @_hash['raw'] = 'raw'
      @_hash['idv_check_type'] = 'idvCheckType'
      @_hash['idv_dispostion'] = 'idvDispostion'
      @_hash['token'] = 'token'
      @_hash['links'] = 'links'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        idv_provider_reference
        idv_result
        idv_sub_result
        idv_provider
        created_on
        raw
        idv_check_type
        idv_dispostion
        token
        links
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(idv_provider_reference = nil,
                   idv_result = nil,
                   idv_sub_result = nil,
                   idv_provider = nil,
                   created_on = nil,
                   raw = nil,
                   idv_check_type = nil,
                   idv_dispostion = nil,
                   token = nil,
                   links = nil)
      @idv_provider_reference = idv_provider_reference unless idv_provider_reference == SKIP
      @idv_result = idv_result unless idv_result == SKIP
      @idv_sub_result = idv_sub_result unless idv_sub_result == SKIP
      @idv_provider = idv_provider unless idv_provider == SKIP
      @created_on = created_on unless created_on == SKIP
      @raw = raw unless raw == SKIP
      @idv_check_type = idv_check_type unless idv_check_type == SKIP
      @idv_dispostion = idv_dispostion unless idv_dispostion == SKIP
      @token = token unless token == SKIP
      @links = links unless links == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      idv_provider_reference =
        hash.key?('idvProviderReference') ? hash['idvProviderReference'] : SKIP
      idv_result = hash.key?('idvResult') ? hash['idvResult'] : SKIP
      idv_sub_result = hash.key?('idvSubResult') ? hash['idvSubResult'] : SKIP
      idv_provider = hash.key?('idvProvider') ? hash['idvProvider'] : SKIP
      created_on = if hash.key?('createdOn')
                     (DateTimeHelper.from_rfc3339(hash['createdOn']) if hash['createdOn'])
                   else
                     SKIP
                   end
      raw = hash.key?('raw') ? hash['raw'] : SKIP
      idv_check_type = hash.key?('idvCheckType') ? hash['idvCheckType'] : SKIP
      idv_dispostion = hash.key?('idvDispostion') ? hash['idvDispostion'] : SKIP
      token = hash.key?('token') ? hash['token'] : SKIP
      # Parameter is an array, so we need to iterate through it
      links = nil
      unless hash['links'].nil?
        links = []
        hash['links'].each do |structure|
          links << (HaetosParams.from_hash(structure) if structure)
        end
      end

      links = SKIP unless hash.key?('links')

      # Create object from extracted values.
      IdentityVerificationResponse.new(idv_provider_reference,
                                       idv_result,
                                       idv_sub_result,
                                       idv_provider,
                                       created_on,
                                       raw,
                                       idv_check_type,
                                       idv_dispostion,
                                       token,
                                       links)
    end

    def to_created_on
      DateTimeHelper.to_rfc3339(created_on)
    end
  end
end
