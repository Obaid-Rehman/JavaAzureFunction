# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Pqapiv2
  # ProgramController
  class ProgramController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Retrieve a list of all programs that supports filtering, sorting, and
    # pagination through existing mechanisms.
    # @return [void] response from the API call
    def list_programs
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/programs'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Retrieve a single program configuration
    # @param [String] prog_token Required parameter: Auto-generated unique
    # identifier representing a program, prefixed with <i>prog-</i>.
    # @return [void] response from the API call
    def retrieve_program(prog_token)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/programs/{prog-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'prog-token' => { 'value' => prog_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Retrieve a list of all program agreements that supports filtering,
    # sorting, and pagination through existing mechanisms.
    # @param [String] prog_token Required parameter: Example:
    # @return [void] response from the API call
    def list_program_agreements(prog_token)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/programs/{prog-token}/agreements'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'prog-token' => { 'value' => prog_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Retrieve a single program agreement
    # @param [String] prog_token Required parameter: Auto-generated unique
    # identifier representing a program, prefixed with <i>prog-</i>.
    # @param [String] agmt_token Required parameter: Auto-generated unique
    # identifier representing a program agreement, prefixed with <i>agmt-</i>.
    # @return [void] response from the API call
    def retrieve_program_agreement(prog_token,
                                   agmt_token)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/programs/{prog-token}/agreements/{agmt-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'prog-token' => { 'value' => prog_token, 'encode' => true },
        'agmt-token' => { 'value' => agmt_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)
      validate_response(_response)
    end
  end
end
