# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Pqapiv2
  # TransferResponse Model.
  class TransferResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique identifier representing the source of funds.
    # @return [String]
    attr_accessor :source_token

    # Unique identifier representing the destination of funds.
    # @return [String]
    attr_accessor :destination_token

    # Optional comments visible to the user.
    # @return [String]
    attr_accessor :notes

    # Optional internal memo not visible to the user.
    # @return [String]
    attr_accessor :memo

    # Amount transferred to the destination
    # @return [Float]
    attr_accessor :destination_amount

    # Currency code type for the object
    # @return [CurrencyTypesEnum]
    attr_accessor :destination_currency

    # Unique value provided by the client for the transfer.
    # @return [String]
    attr_accessor :client_transfer_id

    # Token representing the resource, prefixed with <i>user-</i>, <i>dest-</i>,
    # <i>xfer-</i>, <i>acct-</i>, <i>pmnt-</i>, or <i>docu-</i>.
    # @return [String]
    attr_accessor :token

    # Amount of the transfer in the specified currency.
    # @return [Float]
    attr_accessor :source_amount

    # Currency code type for the object
    # @return [CurrencyTypesEnum]
    attr_accessor :source_currency

    # Current status of a transfer
    # @return [TransferStatusTypesEnum]
    attr_accessor :status

    # Currency conversion object details
    # @return [FxObject]
    attr_accessor :fx

    # Currency conversion object details
    # @return [List of HaetosParams]
    attr_accessor :links

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['source_token'] = 'sourceToken'
      @_hash['destination_token'] = 'destinationToken'
      @_hash['notes'] = 'notes'
      @_hash['memo'] = 'memo'
      @_hash['destination_amount'] = 'destinationAmount'
      @_hash['destination_currency'] = 'destinationCurrency'
      @_hash['client_transfer_id'] = 'clientTransferId'
      @_hash['token'] = 'token'
      @_hash['source_amount'] = 'sourceAmount'
      @_hash['source_currency'] = 'sourceCurrency'
      @_hash['status'] = 'status'
      @_hash['fx'] = 'fx'
      @_hash['links'] = 'links'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        source_token
        destination_token
        notes
        memo
        destination_amount
        destination_currency
        client_transfer_id
        token
        source_amount
        source_currency
        status
        fx
        links
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(source_token = nil,
                   destination_token = nil,
                   notes = nil,
                   memo = nil,
                   destination_amount = nil,
                   destination_currency = nil,
                   client_transfer_id = nil,
                   token = nil,
                   source_amount = nil,
                   source_currency = nil,
                   status = nil,
                   fx = nil,
                   links = nil)
      @source_token = source_token unless source_token == SKIP
      @destination_token = destination_token unless destination_token == SKIP
      @notes = notes unless notes == SKIP
      @memo = memo unless memo == SKIP
      @destination_amount = destination_amount unless destination_amount == SKIP
      @destination_currency = destination_currency unless destination_currency == SKIP
      @client_transfer_id = client_transfer_id unless client_transfer_id == SKIP
      @token = token unless token == SKIP
      @source_amount = source_amount unless source_amount == SKIP
      @source_currency = source_currency unless source_currency == SKIP
      @status = status unless status == SKIP
      @fx = fx unless fx == SKIP
      @links = links unless links == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      source_token = hash.key?('sourceToken') ? hash['sourceToken'] : SKIP
      destination_token =
        hash.key?('destinationToken') ? hash['destinationToken'] : SKIP
      notes = hash.key?('notes') ? hash['notes'] : SKIP
      memo = hash.key?('memo') ? hash['memo'] : SKIP
      destination_amount =
        hash.key?('destinationAmount') ? hash['destinationAmount'] : SKIP
      destination_currency =
        hash.key?('destinationCurrency') ? hash['destinationCurrency'] : SKIP
      client_transfer_id =
        hash.key?('clientTransferId') ? hash['clientTransferId'] : SKIP
      token = hash.key?('token') ? hash['token'] : SKIP
      source_amount = hash.key?('sourceAmount') ? hash['sourceAmount'] : SKIP
      source_currency =
        hash.key?('sourceCurrency') ? hash['sourceCurrency'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      fx = FxObject.from_hash(hash['fx']) if hash['fx']
      # Parameter is an array, so we need to iterate through it
      links = nil
      unless hash['links'].nil?
        links = []
        hash['links'].each do |structure|
          links << (HaetosParams.from_hash(structure) if structure)
        end
      end

      links = SKIP unless hash.key?('links')

      # Create object from extracted values.
      TransferResponse.new(source_token,
                           destination_token,
                           notes,
                           memo,
                           destination_amount,
                           destination_currency,
                           client_transfer_id,
                           token,
                           source_amount,
                           source_currency,
                           status,
                           fx,
                           links)
    end
  end
end
