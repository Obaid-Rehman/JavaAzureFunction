# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class PaymentsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    @response_catcher = HttpResponseCatcher.new
    @controller = PaymentsController.new CONFIG, http_call_back: @response_catcher
  end

  # Retrieve a list of all payments that supports filtering, sorting, and pagination through existing mechanisms.
  def test_retrieve_payment()
    # Parameters for the API call
    pmnt_token = 'pmnt-d3ff8a0d-aec9-49a6-a95b-6191aebeca20'
    x_my_pay_quicker_version = '2020.02.24'
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.retrieve_payment(pmnt_token, x_my_pay_quicker_version, filter: filter, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Accept an open payment quote.
  def test_accept_payment_quote()
    # Parameters for the API call
    pmnt_token = 'pmnt-d3ff8a0d-aec9-49a6-a95b-6191aebeca20'
    x_my_pay_quicker_version = '2020.02.24'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.accept_payment_quote(pmnt_token, x_my_pay_quicker_version, body: body)

    # Test response code
    assert_equal(201, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Cancel an open payment quote.
  def test_cancel_payment_quote()
    # Parameters for the API call
    pmnt_token = 'pmnt-d3ff8a0d-aec9-49a6-a95b-6191aebeca20'
    x_my_pay_quicker_version = '2020.02.24'

    # Perform the API call through the SDK function
    @controller.cancel_payment_quote(pmnt_token, x_my_pay_quicker_version)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Perform a payment retraction for the full payment amount.
  def test_retract_payment_full()
    # Parameters for the API call
    pmnt_token = 'pmnt-d3ff8a0d-aec9-49a6-a95b-6191aebeca20'
    x_my_pay_quicker_version = '2020.02.24'

    # Perform the API call through the SDK function
    @controller.retract_payment_full(pmnt_token, x_my_pay_quicker_version)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Perform a payment retraction for a partial payment amount.
  def test_retract_payment_partial()
    # Parameters for the API call
    pmnt_token = 'pmnt-d3ff8a0d-aec9-49a6-a95b-6191aebeca20'
    x_my_pay_quicker_version = '2020.02.24'

    # Perform the API call through the SDK function
    @controller.retract_payment_partial(pmnt_token, x_my_pay_quicker_version)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Retrieve a list of all payments that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_payments()
    # Parameters for the API call
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.list_payments(x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Create a payment quote. 
  def test_create_payment_quote()
    # Parameters for the API call
    x_my_pay_quicker_version = '2020.02.24'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.create_payment_quote(x_my_pay_quicker_version, body: body)

    # Test response code
    assert_equal(201, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

end
