# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class UsersControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    @response_catcher = HttpResponseCatcher.new
    @controller = UsersController.new CONFIG, http_call_back: @response_catcher
  end

  # Update a user object (change email, address change, etc.) using a user token.
  def test_update_user()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    x_my_pay_quicker_version = '2020.02.24'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.update_user(user_token, x_my_pay_quicker_version, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phon'\
      'eNumber":"760-350-0324","phoneNumberCountry":"US","mobileNumber":"213-4'\
      '46-5755","mobileNumberCountry":"US","addressLine1":"290 Carriage Court"'\
      ',"city":"Los Angeles","region":"CA","country":"US","postalCode":"90017"'\
      ',"addressType":"RESIDENTIAL","email":"jsmith@payquicker.com","gender":"'\
      'FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","languag'\
      'e":"en-US","countryOfBirth":"US","countryOfNationality":"US","token":"u'\
      'ser-f012bc86-4d42-415b-a8b2-be5e0b90e59a","status":"PRE_ACTIVATED","cre'\
      'atedOn":"2020-02-24T22:00:00Z","links":[{"params":{"rel":"self"},"href"'\
      ':"https://platform.mypayquicker.com/api/v2/users/user-f012bc86-4d42-415'\
      'b-a8b2-be5e0b90e59a"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve a single user record by user token.
  def test_retrieve_user()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    x_my_pay_quicker_version = '2020.02.24'

    # Perform the API call through the SDK function
    result = @controller.retrieve_user(user_token, x_my_pay_quicker_version)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phon'\
      'eNumber":"760-350-0324","phoneNumberCountry":"US","mobileNumber":"213-4'\
      '46-5755","mobileNumberCountry":"US","addressLine1":"290 Carriage Court"'\
      ',"city":"Los Angeles","region":"CA","country":"US","postalCode":"90017"'\
      ',"addressType":"RESIDENTIAL","email":"jsmith@payquicker.com","gender":"'\
      'FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","languag'\
      'e":"en-US","countryOfBirth":"US","countryOfNationality":"US","token":"u'\
      'ser-f012bc86-4d42-415b-a8b2-be5e0b90e59a","status":"PRE_ACTIVATED","cre'\
      'atedOn":"2020-02-24T22:00:00Z","links":[{"params":{"rel":"self"},"href"'\
      ':"https://platform.mypayquicker.com/api/v2/users/user-f012bc86-4d42-415'\
      'b-a8b2-be5e0b90e59a"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve a list of all users that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_users()
    # Parameters for the API call
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.list_users(x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['x-timezone'] = nil
    expected_headers['x-paging-pageno'] = nil
    expected_headers['x-paging-pagecount'] = nil
    expected_headers['x-paging-pagesize'] = nil
    expected_headers['x-paging-totalrecordcount'] = nil
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"payload":[{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-'\
      '12-14","phoneNumber":"760-350-0324","phoneNumberCountry":"US","mobileNu'\
      'mber":"213-446-5755","mobileNumberCountry":"US","addressLine1":"290 Car'\
      'riage Court","city":"Los Angeles","region":"CA","country":"US","postalC'\
      'ode":"90017","addressType":"RESIDENTIAL","email":"jsmith@payquicker.com'\
      '","gender":"FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b'\
      '2d","language":"en-US","countryOfBirth":"US","countryOfNationality":"US'\
      '","token":"usr-3b8a0c25-c7e2-4bb7-904e-0a2a66001357","status":"PRE_ACTI'\
      'VATED","links":[{"params":{"rel":"self"},"href":"https://platform.mypay'\
      'quicker.com/api/v2/users/usr-3b8a0c25-c7e2-4bb7-904e-0a2a66001357"}]}],'\
      '"links":[{"params":{"rel":"self"},"href":"https://platform.mypayquicker'\
      '.com/api/v2/users"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Create a new user. Payload contains both required and optional fields for user- and company-based users, allowing for the creation of a corporate/partnership/dba (i.e., Grubhub model) user along with a standard end user (i.e., <i>Payee</i>). The type of the user (<i>Business</i> vs. <i>User</i>) and type of business (<i>Corporation</i> vs. <i>Partnership</i>) provide context that impacts KYC etc.
  def test_create_user()
    # Parameters for the API call
    x_my_pay_quicker_version = '2020.02.24'
    body = UserBase.from_hash(APIHelper.json_deserialize(
      '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phon'\
      'eNumber":"760-350-0324","phoneNumberCountry":"US","mobileNumber":"213-4'\
      '46-5755","mobileNumberCountry":"US","addressLine1":"290 Carriage Court"'\
      ',"city":"Los Angeles","region":"CA","country":"US","postalCode":"90017"'\
      ',"addressType":"RESIDENTIAL","email":"jsmith@payquicker.com","gender":"'\
      'FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","languag'\
      'e":"en-US","countryOfBirth":"US","countryOfNationality":"US"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.create_user(x_my_pay_quicker_version, body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phon'\
      'eNumber":"760-350-0324","phoneNumberCountry":"US","mobileNumber":"213-4'\
      '46-5755","mobileNumberCountry":"US","addressLine1":"290 Carriage Court"'\
      ',"city":"Los Angeles","region":"CA","country":"US","postalCode":"90017"'\
      ',"addressType":"RESIDENTIAL","email":"jsmith@payquicker.com","gender":"'\
      'FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","languag'\
      'e":"en-US","countryOfBirth":"US","countryOfNationality":"US","token":"u'\
      'ser-f012bc86-4d42-415b-a8b2-be5e0b90e59a","status":"PRE_ACTIVATED","cre'\
      'atedOn":"2020-02-24T22:00:00Z","links":[{"params":{"rel":"self"},"href"'\
      ':"https://platform.mypayquicker.com/api/v2/users/user-f012bc86-4d42-415'\
      'b-a8b2-be5e0b90e59a"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Create a new user. Payload contains both required and optional fields for user- and company-based users, allowing for the creation of a corporate/partnership/dba (i.e., Grubhub model) user along with a standard end user (i.e., <i>Payee</i>). The type of the user (<i>Business</i> vs. <i>User</i>) and type of business (<i>Corporation</i> vs. <i>Partnership</i>) provide context that impacts KYC etc.
  def test_create_user1()
    # Parameters for the API call
    x_my_pay_quicker_version = '2020.02.24'
    body = UserBase.from_hash(APIHelper.json_deserialize(
      '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phon'\
      'eNumber":"760-350-0324","phoneNumberCountry":"US","mobileNumber":"213-4'\
      '46-5755","mobileNumberCountry":"US","addressLine1":"290 Carriage Court"'\
      ',"city":"Los Angeles","region":"CA","country":"US","postalCode":"90017"'\
      ',"addressType":"RESIDENTIAL","email":"jsmith@payquicker.com","gender":"'\
      'FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","languag'\
      'e":"en-US","countryOfBirth":"US","countryOfNationality":"US"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.create_user(x_my_pay_quicker_version, body)

    # Test response code
    assert_equal(201, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"firstName":"Jane","lastName":"Smith","dateOfBirth":"1977-12-14","phon'\
      'eNumber":"760-350-0324","phoneNumberCountry":"US","mobileNumber":"213-4'\
      '46-5755","mobileNumberCountry":"US","addressLine1":"290 Carriage Court"'\
      ',"city":"Los Angeles","region":"CA","country":"US","postalCode":"90017"'\
      ',"addressType":"RESIDENTIAL","email":"jsmith@payquicker.com","gender":"'\
      'FEMALE","userType":"INDIVIDUAL","programUserId":"d97ce0519b2d","languag'\
      'e":"en-US","countryOfBirth":"US","countryOfNationality":"US","token":"u'\
      'ser-f012bc86-4d42-415b-a8b2-be5e0b90e59a","status":"PRE_ACTIVATED","cre'\
      'atedOn":"2020-02-24T22:00:00Z","links":[{"params":{"rel":"self"},"href"'\
      ':"https://platform.mypayquicker.com/api/v2/users/user-f012bc86-4d42-415'\
      'b-a8b2-be5e0b90e59a"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve a list of IDV checks by user token that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_user_idv_checks()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    x_my_pay_quicker_version = '2020.02.24'

    # Perform the API call through the SDK function
    result = @controller.list_user_idv_checks(user_token, x_my_pay_quicker_version)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"payload":[{"idvProviderReference":"yPV0h4o1Yw3QzdLAvA7a","idvResult":'\
      '"PASS","idvSubResult":"HARD","idvProvider":"IDOLOGY","createdOn":"2020-'\
      '02-21T22:00:00Z","raw":"<RAW IDV processor output, for informational /d'\
      'ebugging purposes only>","idvCheckType":"NON_DOCUMENTARY","idvDispositi'\
      'on":"FINAL","token":"idvc-7e7567e0-c2db-485d-896d-45901a10baa9","links"'\
      ':[{"params":{"rel":"self"},"href":"https://platform.mypayquicker.com/ap'\
      'i/v2/users/user-f012bc86-4d42-415b-a8b2-be5e0b90e59a/idv-checks/idvc-7e'\
      '7567e0-c2db-485d-896d-45901a10baa9"}]}],"links":[{"params":{"rel":"self'\
      '"},"href":"https://platform.mypayquicker.com/api/v2/users/user-f012bc86'\
      '-4d42-415b-a8b2-be5e0b90e59a/idv-checks"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve a list of all IDV check by IDVC token that supports filtering, sorting, and pagination through existing mechanisms.
  def test_retrieve_user_idv_check()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    idvc_token = 'idvc-7e7567e0-c2db-485d-896d-45901a10baa9'
    x_my_pay_quicker_version = '2020.02.24'

    # Perform the API call through the SDK function
    result = @controller.retrieve_user_idv_check(user_token, idvc_token, x_my_pay_quicker_version)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"idvProviderReference":"yPV0h4o1Yw3QzdLAvA7a","idvResult":"PASS","idvS'\
      'ubResult":"HARD","idvProvider":"IDOLOGY","createdOn":"2020-02-21T22:00:'\
      '00Z","raw":"<RAW IDV processor output, for informational/debugging purp'\
      'oses only>","idvCheckType":"NON_DOCUMENTARY","idvDispostion":"FINAL","t'\
      'oken":"idvc-7e7567e0-c2db-485d-896d-45901a10baa9","links":[{"params":{"'\
      'rel":"self"},"href":"https://platform.mypayquicker.com/api/v2/users/use'\
      'r-f012bc86-4d42-415b-a8b2-be5e0b90e59a/idv-checks/idvc-7e7567e0-c2db-48'\
      '5d-896d-45901a10baa9"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve a list of all user events that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_user_events()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'

    # Perform the API call through the SDK function
    @controller.list_user_events(user_token)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Retrieve a single user event
  def test_retrieve_user_event()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    evnt_token = 'evnt-28491de2-5b22-4e30-028a-45901a10baa9'

    # Perform the API call through the SDK function
    @controller.retrieve_user_event(user_token, evnt_token)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Accept a single program agreement
  def test_accept_program_agreement()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    agmt_token = 'agmt-45901a10-5b22-4e30-028a-45901a10baa9'

    # Perform the API call through the SDK function
    @controller.accept_program_agreement(user_token, agmt_token)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Retrieve a list of all accepted program agreements that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_accepted_program_agreements()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'

    # Perform the API call through the SDK function
    @controller.list_accepted_program_agreements(user_token)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

end
