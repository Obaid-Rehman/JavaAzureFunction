# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class BalancesControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    @response_catcher = HttpResponseCatcher.new
    @controller = BalancesController.new CONFIG, http_call_back: @response_catcher
  end

  # Retrieve a list of user balances that supports filtering, sorting, and pagination through existing mechanisms.
  def test_list_user_balances()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.list_user_balances(user_token, x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"payload":[{"formattedAmount":"$4.32 USD","amount":4.32,"currency":"US'\
      'D","token":"dest-4aed86e2-4929-45bf-814d-9030aef21e79","links":[{"param'\
      's":{"rel":"self"},"href":"https://platform.mypayquicker.com/api/v2/user'\
      's/user-f012bc86-4d42-415b-a8b2-be5e0b90e59a/prepaid-cards/dest-4aed86e2'\
      '-4929-45bf-814d-9030aef21e79/balances"}]}],"links":[{"params":{"rel":"s'\
      'elf"},"href":"https://platform.mypayquicker.com/api/v2/users/user-f012b'\
      'c86-4d42-415b-a8b2-be5e0b90e59a/balances"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve a list of balances by destination token that supports filtering, sorting, and pagination through existing mechanisms. <i>*If the user belongs to a Flex-based program, balances against the user resource will return the wallet balance only. If it is a pre-paid card program (i.e., Meta USD), this balance and its associated pre-paid card balance will be the same.</i>
  def test_list_prepaid_card_balance()
    # Parameters for the API call
    user_token = 'user-f012bc86-4d42-415b-a8b2-be5e0b90e59a'
    dest_token = 'dest-4aed86e2-4929-45bf-814d-9030aef21e79'
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.list_prepaid_card_balance(user_token, dest_token, x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"formattedAmount":"$4.32","amount":4.32,"currency":"USD","token":"dest'\
      '-4aed86e2-4929-45bf-814d-9030aef21e79","links":[{"params":{"rel":"self"'\
      '},"href":"https://platform.mypayquicker.com/api/v2/users/user-f012bc86-'\
      '4d42-415b-a8b2-be5e0b90e59a/prepaid-cards/dest-4aed86e2-4929-45bf-814d-'\
      '9030aef21e79/balances"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve a single account balance.
  def test_list_account_balances()
    # Parameters for the API call
    acct_token = 'acct-b3f0570a-6586-4e00-8d6e-8a2bf93cfae4'
    x_my_pay_quicker_version = '2020.02.24'
    page = nil
    page_size = 20
    filter = '\'name\'*\'Fra\'||*\'Ger\',\'numericCode\'>\'5\''
    sort = '-name'
    language = 'en-US'

    # Perform the API call through the SDK function
    result = @controller.list_account_balances(acct_token, x_my_pay_quicker_version, page: page, page_size: page_size, filter: filter, sort: sort, language: language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"payload":[{"formattedAmount":"$5.00","amount":5,"currency":"USD","tok'\
      'en":"acct-b3f0570a-6586-4e00-8d6e-8a2bf93cfae4"}],"links":[{"params":{"'\
      'rel":"self"},"href":"https://platform.mypayquicker.com/api/v2/accounts/'\
      'acct-b3f0570a-6586-4e00-8d6e-8a2bf93cfae4/balances"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

end
