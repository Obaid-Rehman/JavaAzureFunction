# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Pqapiv2
  # DocumentsController
  class DocumentsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Retrieve a list of user documents that supports filtering, sorting, and
    # pagination through existing mechanisms.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Integer] page Optional parameter: Page number of specific page to
    # return
    # @param [Integer] page_size Optional parameter: Number of items to be
    # displayed per page
    # @param [String] filter Optional parameter: Filter request results by
    # specific criteria.
    # @param [String] sort Optional parameter: Sort request results by specific
    # attribute.
    # @param [LanguageTypesEnum] language Optional parameter: Filter results by
    # language type.
    # @return [void] response from the API call
    def list_user_documents(user_token,
                            x_my_pay_quicker_version,
                            page: nil,
                            page_size: 20,
                            filter: nil,
                            sort: nil,
                            language: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/documents'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'pageSize' => page_size,
        'filter' => filter,
        'sort' => sort,
        'language' => language
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Create a quote for a user document.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [void] response from the API call
    def create_user_document(user_token,
                             x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/documents'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Retrieve an individual user document by its document token.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] docu_token Required parameter: Auto-generated unique
    # identifier representing an uploaded document, prefixed with
    # <i>docu-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @param [Integer] page Optional parameter: Page number of specific page to
    # return
    # @param [Integer] page_size Optional parameter: Number of items to be
    # displayed per page
    # @param [String] filter Optional parameter: Filter request results by
    # specific criteria.
    # @param [String] sort Optional parameter: Sort request results by specific
    # attribute.
    # @param [LanguageTypesEnum] language Optional parameter: Filter results by
    # language type.
    # @return [void] response from the API call
    def retrieve_user_document(user_token,
                               docu_token,
                               x_my_pay_quicker_version,
                               page: nil,
                               page_size: 20,
                               filter: nil,
                               sort: nil,
                               language: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/documents/{docu-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true },
        'docu-token' => { 'value' => docu_token, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'pageSize' => page_size,
        'filter' => filter,
        'sort' => sort,
        'language' => language
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # Replace the user document at the given document token.
    # @param [String] user_token Required parameter: Auto-generated unique
    # identifier representing a user, prefixed with <i>user-</i>.
    # @param [String] docu_token Required parameter: Auto-generated unique
    # identifier representing an uploaded document, prefixed with
    # <i>docu-</i>.
    # @param [String] x_my_pay_quicker_version Required parameter: Date-based
    # API Version specified in the header <i>required</i> on all calls.
    # @return [void] response from the API call
    def replace_user_document(user_token,
                              docu_token,
                              x_my_pay_quicker_version)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/users/{user-token}/documents/{docu-token}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'user-token' => { 'value' => user_token, 'encode' => true },
        'docu-token' => { 'value' => docu_token, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'X-MyPayQuicker-Version' => x_my_pay_quicker_version
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)
      validate_response(_response)
    end
  end
end
