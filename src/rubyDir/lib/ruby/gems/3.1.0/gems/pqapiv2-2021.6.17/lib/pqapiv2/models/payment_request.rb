# pqapiv2
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Pqapiv2
  # Payment request
  class PaymentRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Amount of the transfer in the specified currency.
    # @return [Float]
    attr_accessor :amount

    # Currency code type for the object
    # @return [CurrencyTypesEnum]
    attr_accessor :currency

    # Unique identifier representing the source of funds.
    # @return [String]
    attr_accessor :source_token

    # Unique identifier representing the destination of funds.
    # @return [String]
    attr_accessor :destination_token

    # Optional comments visible to the user.
    # @return [String]
    attr_accessor :notes

    # Optional internal memo not visible to the user.
    # @return [String]
    attr_accessor :memo

    # Used to identify the purpose of a payment and impacts reporting and
    # calculated taxable earnings (if utilizing tax services)
    # @return [PaymentPurposeTypesEnum]
    attr_accessor :purpose

    # Unique value provided by the client for the payment.
    # @return [String]
    attr_accessor :client_payment_id

    # Determines whether the quote is automatically accepted or if a POST
    # utilizing the token for the quote is required.
    # @return [Boolean]
    attr_accessor :auto_accept_quote

    # Transfer is scheduled and will not process before this time.
    # @return [DateTime]
    attr_accessor :not_before

    # Transfer expires if not completed prior to this time.
    # @return [DateTime]
    attr_accessor :not_after

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['amount'] = 'amount'
      @_hash['currency'] = 'currency'
      @_hash['source_token'] = 'sourceToken'
      @_hash['destination_token'] = 'destinationToken'
      @_hash['notes'] = 'notes'
      @_hash['memo'] = 'memo'
      @_hash['purpose'] = 'purpose'
      @_hash['client_payment_id'] = 'clientPaymentId'
      @_hash['auto_accept_quote'] = 'autoAcceptQuote'
      @_hash['not_before'] = 'notBefore'
      @_hash['not_after'] = 'notAfter'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        source_token
        destination_token
        notes
        memo
        purpose
        client_payment_id
        auto_accept_quote
        not_before
        not_after
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(amount = nil,
                   currency = nil,
                   source_token = nil,
                   destination_token = nil,
                   notes = nil,
                   memo = nil,
                   purpose = nil,
                   client_payment_id = nil,
                   auto_accept_quote = nil,
                   not_before = nil,
                   not_after = nil)
      @amount = amount unless amount == SKIP
      @currency = currency unless currency == SKIP
      @source_token = source_token unless source_token == SKIP
      @destination_token = destination_token unless destination_token == SKIP
      @notes = notes unless notes == SKIP
      @memo = memo unless memo == SKIP
      @purpose = purpose unless purpose == SKIP
      @client_payment_id = client_payment_id unless client_payment_id == SKIP
      @auto_accept_quote = auto_accept_quote unless auto_accept_quote == SKIP
      @not_before = not_before unless not_before == SKIP
      @not_after = not_after unless not_after == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      source_token = hash.key?('sourceToken') ? hash['sourceToken'] : SKIP
      destination_token =
        hash.key?('destinationToken') ? hash['destinationToken'] : SKIP
      notes = hash.key?('notes') ? hash['notes'] : SKIP
      memo = hash.key?('memo') ? hash['memo'] : SKIP
      purpose = hash.key?('purpose') ? hash['purpose'] : SKIP
      client_payment_id =
        hash.key?('clientPaymentId') ? hash['clientPaymentId'] : SKIP
      auto_accept_quote =
        hash.key?('autoAcceptQuote') ? hash['autoAcceptQuote'] : SKIP
      not_before = if hash.key?('notBefore')
                     (DateTimeHelper.from_rfc3339(hash['notBefore']) if hash['notBefore'])
                   else
                     SKIP
                   end
      not_after = if hash.key?('notAfter')
                    (DateTimeHelper.from_rfc3339(hash['notAfter']) if hash['notAfter'])
                  else
                    SKIP
                  end

      # Create object from extracted values.
      PaymentRequest.new(amount,
                         currency,
                         source_token,
                         destination_token,
                         notes,
                         memo,
                         purpose,
                         client_payment_id,
                         auto_accept_quote,
                         not_before,
                         not_after)
    end

    def to_not_before
      DateTimeHelper.to_rfc3339(not_before)
    end

    def to_not_after
      DateTimeHelper.to_rfc3339(not_after)
    end
  end
end
